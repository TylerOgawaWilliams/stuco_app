"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
import os
from pathlib import Path
from stuco_app import __version__ as app_version

ENVIRONMENT = os.environ.get("ENVIRONMENT", "local")

logging.basicConfig(level=logging.DEBUG if ENVIRONMENT == "local" else logging.INFO)

LOGGER = logging.getLogger(__name__)
APP_VERSION = app_version

USE_S3_STORAGE = False
USE_SES_EMAIL = False
USE_POSTGRES = False
SYSTEM_EMAIL_SENDER = "noreply@gmail.com"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "1234hijklmnn"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT == "local"

LOGGER.warning(f"Debug: {DEBUG}")

ALLOWED_HOSTS = ["*"]

LOGGER.info(f"Allowed Hosts: {ALLOWED_HOSTS}")

# Application definition

INSTALLED_APPS = [
    "auditlog",
    "users",  # custom users app
    "file_uploads",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "mozilla_django_oidc",  # Load after auth
    "django_htmx",
    "django_login_history2",
    "widget_tweaks",
    "stuco_app",
]

MIDDLEWARE = [
    "django_htmx.middleware.HtmxMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "mozilla_django_oidc.middleware.SessionRefresh",
    "auditlog.middleware.AuditlogMiddleware",
]

# When running in local environment, add debug toolbar
if ENVIRONMENT == "local":
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend"
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
def parse_connect_string(connect_string):
    parts = connect_string.split("//")
    if len(parts) != 2:
        raise ValueError("Invalid connection string")
    connect_details = parts[1].split("@at")
    user, password = connect_details[0].split(":")
    host_info, db_name = connect_details[1].split("/")
    host, port = host_info.split(":")

    return user, password, host, port, db_name



if USE_POSTGRES:
    LOGGER.info("Using Postgres Database")
    my_connect_string = os.environ.get("DATABASE_CONNECT_STRING", None)
    if not my_connect_string:
        raise ValueError("DATABASE_CONNECT_STRING environment variable must be set when USE_POSTGRES is True")

    user, password, host, port, db_name = parse_connect_string(
        my_connect_string
    )

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": db_name,
            "USER": user,
            "HOST": host,
            "PORT": port,
            "PASSWORD": password,
            "ATOMIC_REQUESTS": True,
            "OPTIONS": {"sslmode": "require"},
        }
    }

else:
    LOGGER.info("Using SQLite Database")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        },
    }

# CACHES dictionary which contains caching configurations.
CACHES = {
    # a cache alias or name. In this case, we use "default" as the alias.
    "default": {
        # Here, we're using the in-memory cache backend.
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        # LOCATION parameter gives a unique name or identifier to this cache instance.
        "LOCATION": "cseo_data_platform-cache",
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.CustomUser"
AUTH_COGNITO_FIRST = False

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = (BASE_DIR / "static",)
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

LOGGER.info(f"Static files will be served from: {STATIC_URL}")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:8000", "http://localhost:5085", "http://localhost:8000"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


AWS_DEFAULT_REGION = "us-east-1"

LOGOUT_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL = "/"

if USE_SES_EMAIL:
    LOGGER.warning("Using SES Email")
    EMAIL_BACKEND = "django_ses.SESBackend"
    AWS_SES_CONFIGURATION_SET = os.environ.get("AWS_SES_CONFIGURATION_SET", None)
    USE_SES_V2 = True
    AWS_SES_AUTO_THROTTLE = None
else:
    LOGGER.warning("Using Console Email")
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
